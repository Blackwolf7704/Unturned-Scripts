event onLoad()
{
    database.execute("
        #테이블 생성
        CREATE TABLE IF NOT EXISTS `time_reward` (
        `steamid` VARCHAR(50) NOT NULL COLLATE 'utf8_general_ci',
        `playername` CHAR(50) NOT NULL COLLATE 'utf8_general_ci',
        `conntime` INT(10) NOT NULL DEFAULT '0',
        `total_conntime` INT(30) NOT NULL DEFAULT '0',
        `isreward` INT(5) NOT NULL DEFAULT '0',
        `lastupdate` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        PRIMARY KEY (`steamid`) USING BTREE
        )
        COLLATE='utf8_general_ci'
        ENGINE=InnoDB
        ;

        #매일 데이터 초기화
        CREATE EVENT IF NOT EXISTS `data_reset`
	    ON SCHEDULE
		    EVERY 1 DAY STARTS '2023-01-01'
        ON COMPLETION PRESERVE
        ENABLE
        COMMENT 'Every day - Data reset'
        DO
        UPDATE time_reward SET conntime = DEFAULT, isreward = DEFAULT;

        #이벤트 스케줄러가 off일 경우 on으로 변경
        SET GLOBAL event_scheduler = ON;
    ");
}

//유저 조인시 이름이 다르면 갱신, 만약 새로운 유저면 값 추가
event onPlayerJoined(player)
{
    database.execute("
        INSERT INTO time_reward(steamid, playername) SELECT '{0}', '{1}' FROM DUAL WHERE NOT EXISTS (SELECT steamid FROM time_reward WHERE steamid = '{0}')LIMIT 1;

        UPDATE time_reward SET playername = '{1}' WHERE EXISTS (SELECT steamid, playername FROM (SELECT * FROM time_reward)AS x WHERE x.steamid = '{0}' AND NOT (x.playername = '{1}'))LIMIT 1;

    ".format(player.id, player.name));
}

//5초마다 서버에 접속한 사람들의 접속시간 갱신
//Interval 내부 값 변경으로 갱신시간 변경 가능
event onInterval(5)
{
    foreach(player in server.players){
        database.execute("
            UPDATE time_reward SET conntime = conntime + 5 WHERE steamid = '{0}' LIMIT 1;
            UPDATE time_reward SET total_conntime = total_conntime + 5 WHERE steamid = '{0}' LIMIT 1;
        ".format(player.id));

        chk(player);
    }
}

//보상 시간 변경 (1800초, 3600초)
reward_time = [
    1800,
    3600
];

//확인 후 보상지급
function chk(player)
{
    //접속시간, 보상확인 불러오기
    data = database.firstRow("
        SELECT conntime, isreward FROM time_reward WHERE steamid = @p0;
    ", player.id);

    //reward_time에 해당하지 않는 경우 제외
    if(data[1].toNumber() > reward_time.count - 1) {
        return;
    }

    if(data[0].toNumber() >= reward_time[data[1].toNumber()]) {
        database.nonQuery("
            UPDATE time_reward SET isreward = isreward + 1 WHERE steamid = @p0;
        ", player.id);

        player.message("접속보상 지급 완료", "red");
        player.inventory.addItem(INSERT_ITEM_ID, 1); //ITEM_ID는 지정하지 않음
    }
}
